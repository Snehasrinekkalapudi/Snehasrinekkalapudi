#include<stdio.h>
#include<stdlib.h>
struct node{
  int data;
  struct node*next;
};
struct node*create_node(int data){
   struct node *temp=malloc(sizeof(struct node*));
   temp->data=data;
   temp->next=temp;
   return temp;
}
void print(struct node *tail){
  struct node *ptr=tail->next;
  printf("\nelements in list are:");
  do
  {
    printf(" %d",ptr->data);
    ptr=ptr->next;
  }while(ptr!=tail->next);
}
struct node*insert_at_beg(struct node *tail,int d)
{
   struct node*temp=malloc(sizeof(struct node*));
   temp->data=d;
   temp->next=NULL;
   temp->next=tail->next;
   tail->next=temp;
   return tail;   
}
struct node*insert_at_end(struct node *tail,int d)
{
   struct node*temp=malloc(sizeof(struct node*));
   temp->data=d;
   temp->next=NULL;
   temp->next=tail->next;
   tail->next=temp;
   tail=tail->next;
   return tail;
 }
struct node*insert_at_position(struct node *tail,int d,int pos){
  struct node*temp=malloc(sizeof(struct node*));
   temp->data=d;
   temp->next=NULL;
   struct node *ptr=tail->next;
   if(pos==1){
    insert_at_beg(tail,d);
   }
   else{
   pos--;
    while(pos!=1){
    ptr=ptr->next;
    pos--;
    }
    if(ptr==tail){
     temp->next=tail->next;
     tail->next=temp;
     tail=tail->next;
    }
    else{
     temp->next=ptr->next;
     ptr->next=temp;
    }
   }
   return tail;
}
struct node*delete_at_beg(struct node *tail){
   struct node*temp=tail->next;
   tail->next=temp->next;
   free(temp);
   temp=NULL;
   return tail;
}
struct node*delete_at_end(struct node *tail){
  struct node*temp=tail->next;
  while(temp->next!=tail){
   temp=temp->next;
  }
  temp->next=tail->next;
  free(tail);
  tail=temp;
  return tail;
}
struct node* delete_at_position(struct node *tail,int pos){
    if(tail==NULL){
    printf("list is empty");
    	return tail;
    }
    struct node *temp=tail->next;
    struct node *temp1=NULL;
    if(pos==1){
    	delete_at_beg(tail);
    }
    else{
    pos--;
    while(pos>1){
    	temp=temp->next;
    	pos--;
    }
    temp1=temp->next;
    temp->next=temp1->next;
    //temp=temp1->next;
    if(temp1==tail){
    	tail=temp;
    }
    free(temp1);
    temp1=NULL;
    }
    return tail;
}
int main()
{
 struct node *tail;
 tail=create_node(50);
 print(tail);
 
 printf("\ninsert at beginning");
 tail=insert_at_beg(tail,20);
 print(tail);
 
 printf("\ninsert at end");
 tail=insert_at_end(tail,30);
 print(tail);
 
 printf("\ninsert at position");
 tail=insert_at_position(tail,40,2);
 print(tail);
 
 
 printf("\ninsert at position");
 tail=insert_at_position(tail,60,2);
 print(tail);
 
 printf("\ndelete at beginning");
 tail=delete_at_beg(tail);
 print(tail);
 
 printf("\ndelete at end");
 tail=delete_at_end(tail);
 print(tail);
 
 printf("\ndelete at position");
 tail=delete_at_position(tail,2);
 print(tail);
}
